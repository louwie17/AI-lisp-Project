(defstruct Node 
  parent
  typeNode ;; 2-node or 3-node
  leftChild
  rightChild
  middleChild
  leftVal
  rightVal
)

(defun newNode ()
  (make-Node)
)

(defun newTwoNode (value)
  (make-Node :leftVal value :typeNode 'twoNode)
)

(defun newThreeNode (leftVal rightVal)
  (setf comp (compareTo leftVal rightVal))
  (if (< comp 0)
    (make-Node :leftVal leftVal :rightVal rightVal :typeNode 'threeNode)
    (make-Node :leftVal rightVal :rightVal leftVal :typeNode 'threeNode)
    )
)

(defun setLeftChild (node leftChild)
    (setf (Node-leftChild node) leftChild)  
    (if (not (null leftChild))
      (setf (Node-parent leftChild) node)
      )
)

(defun getLeftChild (node)
  (Node-leftChild node)
  )

(defun setRightChild (node rightChild)
  (setf (Node-rightChild node) rightChild)
  (if (not (null rightChild))
    (setf (Node-parent rightChild) node)
    )
)

(defun getRightChild (node)
  (Node-rightChild node)
  )

(defun removeChildren (node)
  (setf (Node-leftChild node) nil)
  (setf (Node-rightChild node) nil)
)

(defun setMiddleChild (node middleChild)
  (if (equal 'threeNode (Node-typeNode node))
    (progn (setf (Node-middleChild node) middleChild)
      (if (not (null middleChild))
        (setf (Node-parent middleChild) node)
     )
    )
    )
)

(defun getMiddleChild (node)
  (Node-middleChild node))

(defun getParent (node)
  (Node-parent node)
)

(defun setParent (node parent)
  (setf (Node-parent node) parent)
)

(defun getValue (node)
    (Node-leftVal node)
)

(defun getRightVal (node)
  (Node-rightVal node)
)

(defun isTwoNode (node)
  (if (equal 'twoNode (Node-typeNode node))
    (return-from isTwoNode 'T)
    (return-from isTwoNode 'nil)
    )
  )

(defun isThreeNode (node)
  (return-from isThreeNode (not (isTwoNode node)))
)

(defun isLeave (node)
  (return-from isLeave 
               (and (null (getLeftChild node))
                    (null (getRightChild node))))
)

(defun replaceChild (node currentChild newChild)
  (print "called replace Child")
  (if (equalp currentChild (getLeftChild node))
      (setLeftChild node newChild)
      (if (equalp currentChild (getRightChild node))
        (setRightChild node newChild)
        (if (equalp (getMiddleChild node) currentChild)
          (setMiddleChild node newChild)
          )
        )
      )
    (setParent newChild node)
    (setParent currentChild 'nil)
    T
  )


(defun initiateTree ()
    (defparameter root nil)
    (defparameter nodesAdded '())
)

(defun addToTree (value)
    (if (null root)
      (setf root (newTwoNode value))
      (progn
       (setf result (insert value root))
       (if (not (null result))
         (setf root result)
       )
      )
    )
    (setf nodesAdded (append nodesAdded (list value)))
    T
)

(defun contains (value)
  (return (not (null (findNode node value))))
)

(defun compareTo (nodeA nodeB)

  (if (equalp nodeA nodeB) (return-from compareTo 0))
  (if (and (numberp nodeA) (numberp nodeB))
    (if (< nodeA nodeB) (return-from compareTo -1) (return-from compareTo 1))
    (if (string< nodeA nodeB) (return-from compareTo -1) (return-from compareTo 1))
    )
)

(defun findNode (node value)
  (if (null node) (return-from findNode 'nil))

  (if (equal 'threeNode (Node-typeNode node))
    (progn 
      (setf leftComp (compareTo value (getValue (getLeftNode node))))
      (setf rightComp (compareTo value (getValue (getRightNode node))))
      (if (and (= leftComp 0) (= rightComp 0))
        (return node)
        )
      (if (< leftComp 0)
         (return (findNode (getLeftChild node) value))
         (if (< rightComp 0)
           (return (findNode (getMiddleChild node) value))
           (return (findNode (getRightChild node) value))
           )
         )
        )
    (progn
      (setf comp (compareTo value (getValue node)))
      (if (= comp 0)
        (return-from findNode node)
        (if (< comp 0)
          (return-from findNode node (findNode (getLeftChild node) value))
          (return-from findNode node (findNode (getRightChild node) value))
          )
        )
    )
  )
)

(defun unlinkNode (node)
  (removeChildren node)
  (setParent node nil)
)

(defun insert (value node)
  (format t "~% Insert ~A Node ~A ~%" value (getValue node))
  (setf returnValue 'nil) 
  (if (equal 'twoNode (Node-typeNode node))
    (progn
        (setf comp (compareTo value (getValue node)))
        (format t "TwoNode comp: ~A " comp)
        (if (isLeave node)
          (progn
            (print "isleave node")
            (if (equal comp 0)
                (return-from insert 'nil))
            (setf thnode (newThreeNode value (getValue node)))
            (setf parent (getParent node))
            (if (not (null parent))
                (replaceChild parent node thnode)
                (setf root thnode)
            )
          )
          (progn
            (print "is not leave node")
            (if (< comp 0)
              (progn 
                (setf result (insert value (getLeftChild node)))
                (setf returnValue 'nil)
                (if (not (null result))
                  (progn
                    (setf threeNode (newThreeNode (getValue result) (getValue node)))
                    (setRightChild threeNode (getRightChild node))
                    (setMiddleChild threeNode (getRightChild result))
                    (setLeftChild threeNode (getLeftChild result))
                    (if (not (null (getParent node)))
                      (replaceChild (getParent node) node threeNode)
                      (setf root threeNode)
                      )
                    (unlinkNode node)
                    )
                  )
                )
                (if (> comp 0)
                  (progn
                    (setf result (insert value (getRightChild node)))
                    (setf returnValue 'nil)
                    (print "Came back from insert ~%")
                    (if (not (null result))
                        (progn
                            (setf threeNode (newThreeNode (getValue result) (getValue node)))
                            (setLeftChild threeNode (getLeftChild node))
                            (setMiddleChild threeNode (getLeftChild result))
                            (setRightChild threeNode (getRightChild result))
                            (format t "threeNode ~A ~A ~%" (getValue threeNode) (getRightVal threeNode))
                            (if (not (null (getParent node)))
                              (replaceChild (getParent node) node threeNode)
                             (setf root threeNode)
                              )
                            (unlinkNode node)
                            (format t "Root: ~A ~A ~%" (getValue root) (getRightVal root))
                            ;;(return-from insert 'nil)
                            )
                        )
                    )
                    (return-from insert 'nil)
                  ) 
                )
            )
        )
      )
    (progn  ;; three node
      (setf threeNode node)
      (print "is three node")
        (setf leftComp (compareTo value (getValue threeNode)))
        (setf rightComp (compareTo value (getRightVal threeNode)))
        (format t "Left:~A Right:~A~%" leftComp rightComp)
        (if (or (= leftComp 0) (= rightComp 0))
          (return-from insert 'nil)
        )

        (if (isLeave threeNode)
          (setf returnValue (splitNode threeNode value))
          (progn
            (print "not a leave")
            (if (< leftComp 0)
              (progn
                (setf result (insert value (getLeftChild threeNode)))
                (setf threeNode node)
                (if (not (null result))
                  (progn
                    (setf returnValue (splitNode threeNode (getValue result)))
                    (setLeftChild (getLeftChild returnValue) (getLeftChild result))
                    (setRightChild (getLeftChild returnValue) (getRightChild result))
                    (setLeftChild (getRightChild returnValue) (getMiddleChild threeNode))
                    (setRightChild (getRightChild returnValue) (getRightChild threeNode))
                    (unlinkNode threeNode)
                  )
                  (return-from insert 'nil)
                )
               )
               (if (< rightComp 0)
                 (progn
                   (print (getValue node))
                   (setf result (insert value (getMiddleChild threeNode)))
                   (setf threeNode node)
                   (if (not (null result))
                     (progn
                       (setf returnValue (splitNode threeNode (getValue result)))
                       (setLeftChild (getLeftChild returnValue) (getLeftChild threeNode))
                       (setRightChild (getLeftChild returnValue) (getLeftChild result))
                       (setLeftChild (getRightChild returnValue) (getRightChild result))
                       (setRightChild (getRightChild returnValue) (getRightChild threeNode))
                       (unlinkNode threeNode)
                     )
                     (print "is null"))
                  )
                  (progn
                    (print "both are not less than 0")
                    (setf result (insert value (getRightChild threeNode)))
                    (setf threeNode node)
                    (if (not (null result))
                      (progn
                        (setf returnValue (splitNode threeNode (getValue result)))
                        (setLeftChild (getLeftChild returnValue) (getLeftChild threeNode))
                        (setRightChild (getLeftChild returnValue) (getMiddleChild threeNode))
                        (setLeftChild (getRightChild returnValue) (getLeftChild result))
                        (setRightChild (getRightChild returnValue) (getRightChild result))
                        (unlinkNode threeNode)
                      )
                    )
                  )
                 )
               )
            )
          )
        )
    )
    (if (not (null returnValue))
        (format t "ReturnVal: ~A ~A ~A" (getValue (getLeftChild returnValue))
                (getValue returnValue) (getValue (getRightChild returnValue))))
    (print "got out of splitnode")
    (return-from insert returnValue)
  )


(defun splitNode (threeNode value)
  
  (print "splitNode")
  (if (< (compareTo value (getValue threeNode)) 0)
    (progn 
      (setf mini value)
      (setf middle (getValue threeNode))
      (setf maxi (getRightVal threeNode))
      )
    (if (< (compareTo value (getRightVal threeNode)) 0)
      (progn
        (setf mini (getValue threeNode))
        (setf middle value)
        (setf maxi (getRightVal threeNode))
        )
      (progn
        (setf mini (getValue threeNode))
        (setf maxi value)
        (setf middle (getRightVal threeNode))
        )
      )
    )
  (setf parent (newTwoNode middle))
  (setLeftChild parent (newTwoNode mini))
  (setRightChild parent (newTwoNode maxi))
  (format t "Splitnode: ~A ~A ~A ~%" mini middle maxi)
  (return-from splitNode parent)
)

(defun removeNode (value)
    (initiateTree)
    (setf nodes (list root 'nil))
    (loop while (> (length nodes) 1) do
        (setf N (first nodes))
        (setf nodes (rest nodes))
        (cond
          ((null N)
           (progn
             (setf nodes (append nodes (list '())))))
          ((isTwoNode N)
           (progn 
             (removeHelper value (getValue N))
             (unless (null (getLeftChild N))
               (setf nodes (append nodes (list (getLeftChild N)))))
             (unless (null (getRightChild N))
               (setf nodes (append nodes (list (getRightChild N)))))))
          ((isThreeNode N) 
           (progn
             (removeHelper value (getValue N))
             (removeHelper value (getRightVal N))
             (unless (null (getLeftChild N))
               (setf nodes (append nodes (list (getLeftChild N)))))
             (unless (null (getMiddleChild N))
               (setf nodes (append nodes (list (getMiddleChild N)))))
             (unless (null (getRightChild N))
               (setf nodes (append nodes (list (getRightChild N)))))))))
)

(defun removeHelper (Remvalue  value)
  (if (not (equal Remvalue value))
    (addToTree value)))

(defun printTree (topNode)
  (setf nodes (list topNode 'nil))
  (loop while (> (length nodes) 1) do
        (setf N (first nodes))
        (setf nodes (rest nodes))
        (cond
          ((null N)
           (progn
             (format t "~%")
             (setf nodes (append nodes (list '())))))
          ((isTwoNode N)
           (progn 
             (format t "(~A) " (getValue N))
             (unless (null (getLeftChild N))
               (setf nodes (append nodes (list (getLeftChild N)))))
             (unless (null (getRightChild N))
               (setf nodes (append nodes (list (getRightChild N)))))))
          ((isThreeNode N) 
           (progn
             (format t "(~A)(~A) " (getValue N) (getRightVal N))
             (unless (null (getLeftChild N))
               (setf nodes (append nodes (list (getLeftChild N)))))
             (unless (null (getMiddleChild N))
               (setf nodes (append nodes (list (getMiddleChild N)))))
             (unless (null (getRightChild N))
               (setf nodes (append nodes (list (getRightChild N))))))))))
 



(defun test ()

  (initiateTree)
  (addToTree 'a)
  (addToTree 'l)
  (addToTree 'g)
  (addToTree 'o)
  (printTree root)
  (addToTree 'r)
  (addToTree 'i)
  (addToTree 't)
  (addToTree 'h)
  (addToTree 'm)
  (addToTree 's)
  (printTree root)

  (removeNode 'a)
  (printTree root)
  ;;(print "done")
)
